!!import:"io" "strings"
.TH TE "7"
.SH NAME
te \- The best templating engine
.SH "TEMPLATE LANGUAGE"
Creating templating engine templates (\fI.tet\fR files) is quite simple and easy to understand. Everything outside a code block is placed into a write statement. Consider the following:

.IP
.EX
.B
Hello, \<| w("World!") \|>
.EE
.P

This is transformed into:

.IP
.EX
.B
w(`Hello, `); w("World!");
.EE
.P

Which is then fed into the go compiler to become:

.IP
.EX
.B
Hello, World!
.EE
.P

Exactly what you would expect. Because writing w() around everything gets a little annoying, there's some syntactic sugar to make this easier to read.

.IP
.EX
.B
Hello, \<|:w "World!" \|>
.EE
.P

As for the actual allowed code syntax, te actually generates golang and simply calls `go run <builder-file>.go`, the deletes the golang it generated. While this requires the go compiler at runtime, it has the benefit of allowing you to write processing code in a fully featured, statically typed language.

By default, "os" and "fmt" are already imported, as they are required for the actual template generation code. If you wish to import anything else from the standard library, add an import directive like so:

.IP
.EX
.B
!!import:"strings" "time"
.B
Hello, \<|:w strings.ToUpper("World! ") + time.Now().String() \|>
.EE
.P

The import directive must be the first line in the file, otherwise it will be treated as regular text.
<|
  // Provided functions
  type pFunc struct {
    longName string
    definition string
    description string
  }

  file, _ := os.Open("main.go")
  defer file.Close()
  b, _ := io.ReadAll(file)
  buffer := string(b)
  lines := strings.Split(buffer, "\n")
  var start, stop int
  for i, line := range lines {
    if line == "//te:start" {
      start = i
    } else if line == "//te:stop" {
      stop = i
      break
    }
  }
  lines = lines[start+1:stop]
  var pFuncs []pFunc
  for i := 0; i < len(lines); i++ {
    if strings.HasPrefix(lines[i], "`func") {
      pFuncs = append(pFuncs, pFunc{
        longName: lines[i-2][3:],
        description: lines[i-1][3:],
        definition: lines[i][1:len(lines[i])-2],
      })
    }
  }
|>
.SH "FUNCTIONS"
<| for _, f := range pFuncs { |>
.HP
<|:w f.longName |>
.IP
<|:w f.definition |> <|:w f.description |>
<| } |>
